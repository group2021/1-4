<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.example.second.dao.TeacherDao">
    <resultMap id="BaseResultMap" type="com.example.second.entity.Teacher">
        <id column="uid" property="uid" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="sex" property="sex" jdbcType="VARCHAR"/>
        <result column="college" property="college" jdbcType="VARCHAR"/>
        <result column="major" property="major" jdbcType="VARCHAR"/>
        <result column="marriage" property="marriage" jdbcType="VARCHAR"/>
        <result column="work" property="work" jdbcType="VARCHAR"/>
        <result column="address" property="address" jdbcType="VARCHAR"/>
        <result column="bloodType" property="bloodType" jdbcType="VARCHAR"/>
        <result column="salary" property="salary" jdbcType="INTEGER"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="date" property="date" jdbcType="VARCHAR"/>
        <result column="hobby" property="hobby" jdbcType="VARCHAR"/>
        <result column="nation" property="nation" jdbcType="VARCHAR"/>




    </resultMap>

    <sql id="Base_Column_List">
        uid, name, age, sex ,college, majorï¼Œmarriage,work,address,bloodType,phone,email,date,hobby,nation,salary
    </sql>



    <select id="findAllTeachers" resultType="com.example.second.entity.Teacher">
        select * from teacher
    </select>

    <select id="findTeacherByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select * from teacher where name = #{name,jdbcType=VARCHAR}
    </select>

    <delete id="deleteTeachersByIds">
        delete from teacher where uid in
        <foreach collection="ids" item="id" separator="," open="(" close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getCountTeachers" resultType="java.lang.Integer">
        select count(uid) as count from teacher
    </select>

    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long">
        select
        <include refid="Base_Column_List"/>
        from teacher
        where uid = #{uid,jdbcType=BIGINT}
    </select>
    <delete id="deleteTeacherById" parameterType="java.lang.Long">
        delete from teacher
        where uid = #{uid,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.example.second.entity.Teacher">
        insert into teacher (uid, name, age,
        sex,college,major,work ,address,bloodType,phone,email,date,hobby,nation,salary)
        values (#{uid,jdbcType=BIGINT}, #{name,jdbcType=VARCHAR}, #{age,jdbcType=INTEGER},
        #{sex,jdbcType=VARCHAR}), #{college,jdbcType=VARCHAR}, #{major,jdbcType=VARCHAR}), #{work ,jdbcType=VARCHAR})
        ,#{address ,jdbcType=VARCHAR},#{blood ,jdbcType=VARCHAR},#{phone,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR}
        ,#{date,jdbcType=VARCHAR} ,#{hobby,jdbcType=VARCHAR},#{nation,jdbcType=VARCHAR},#{salary,jdbcType=INTEGER})

    </insert>
    <insert id="addTeacher" parameterType="com.example.second.entity.Teacher">
        insert into teacher
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                uid,
            </if>
            <if test="name != null">
                name,
            </if>
            <if test="age != null">
                age,
            </if>
            <if test="sex != null">
                sex,
            </if>

            <if test="college != null">
                college,
            </if>

            <if test="major != null">
                major,
            </if>

            <if test="marriage != null">
                marriage,
            </if>

            <if test="work != null">
                work,
            </if>

            <if test="address != null">
                address,
            </if>


            <if test="bloodType != null">
                bloodType,
            </if>

            <if test="salary != null">
                salary,
            </if>
            <if test="phone != null">
                phone,
            </if>

            <if test="email != null">
                email,
            </if>
            <if test="date != null">
                date,
            </if>

            <if test="hobby != null">
                hobby,
            </if>
            <if test="nation != null">
                nation,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="uid != null">
                #{uid,jdbcType=BIGINT},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                #{age,jdbcType=INTEGER},
            </if>
            <if test="sex != null">
                #{sex,jdbcType=VARCHAR},
            </if>

            <if test="college != null">
                #{college,jdbcType=VARCHAR},
            </if>

            <if test="major != null">
                #{major,jdbcType=VARCHAR},
            </if>

            <if test="marriage != null">
                #{marriage,jdbcType=VARCHAR},
            </if>
            <if test="work != null">
                #{work ,jdbcType=VARCHAR},
            </if>

            <if test="address != null">
                #{address,jdbcType=VARCHAR},
            </if>



            <if test="bloodType != null">
                #{bloodType,jdbcType=VARCHAR},
            </if>
            <if test="salary != null">
                #{salary,jdbcType=INTEGER},
            </if>
            <if test="phone != null">
                #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                #{email,jdbcType=VARCHAR},
            </if>
            <if test="date != null">
            #{date,jdbcType=VARCHAR},
            </if>

            <if test="hobby != null">
                #{hobby,jdbcType=VARCHAR},
            </if>
            <if test="nation != null">
                #{nation,jdbcType=VARCHAR},
            </if>

        </trim>
    </insert>
    <update id="updateTeacher" parameterType="com.example.second.entity.Teacher">
        update teacher
        <set>
            <if test="name != null">
                name = #{name,jdbcType=VARCHAR},
            </if>
            <if test="age != null">
                age = #{age,jdbcType=INTEGER},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=VARCHAR},
            </if>

            <if test="college != null">
                college = #{college,jdbcType=VARCHAR},
            </if>

            <if test="major != null">
                major = #{major,jdbcType=VARCHAR},
            </if>
            <if test="marriage != null">
                marriage = #{marriage,jdbcType=VARCHAR},
            </if>
            <if test="work != null">
                work = #{work,jdbcType=VARCHAR},
            </if>
            <if test="address != null">
                address = #{address,jdbcType=VARCHAR},
            </if>


            <if test="bloodType != null">
                bloodType = #{bloodType,jdbcType=VARCHAR},
            </if>
            <if test="salary != null">
                salary = #{salary,jdbcType=INTEGER},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="date != null">
            date = #{date,jdbcType=VARCHAR},
            </if>
            <if test="hobby != null">
                hobby = #{hobby,jdbcType=VARCHAR},
            </if>
            <if test="nation != null">
                nation = #{nation,jdbcType=VARCHAR},
            </if>
        </set>
        where uid = #{uid,jdbcType=BIGINT}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.example.second.entity.Teacher">
        update teacher
        set name = #{name,jdbcType=VARCHAR},
        age = #{age,jdbcType=INTEGER},
        sex = #{sex,jdbcType=VARCHAR},
        college = #{college,jdbcType=VARCHAR},
        major = #{major,jdbcType=VARCHAR},
        marriage = #{marriage,jdbcType=VARCHAR},
        work  = #{work,jdbcType=VARCHAR},
        address  = #{address,jdbcType=VARCHAR},
        bloodType  = #{bloodType,jdbcType=VARCHAR},
        phone  = #{phone,jdbcType=VARCHAR},
        email  = #{email,jdbcType=VARCHAR},
        date  = #{date,jdbcType=VARCHAR},
        hobby  = #{hobby,jdbcType=VARCHAR},
        nation  = #{nation,jdbcType=VARCHAR},
            salary=#{salary,jdbcType=INTEGER},


            where uid = #{uid,jdbcType=BIGINT}
    </update>
</mapper>